
AdcProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e1c  08006e1c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e20  08006e20  00016e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08006e24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000050  08006e74  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08006e74  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191de  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003375  00000000  00000000  0003925e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b125  00000000  00000000  0003ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c26e  00000000  00000000  00069fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a6fc  00000000  00000000  00086213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019090f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  00190960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006db4 	.word	0x08006db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	08006db4 	.word	0x08006db4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_DMA_Init+0x38>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200b      	movs	r0, #11
 8000ccc:	f000 fefb 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f000 ff14 	bl	8001afe <HAL_NVIC_EnableIRQ>

}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a33      	ldr	r2, [pc, #204]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <MX_GPIO_Init+0x118>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000d60:	4827      	ldr	r0, [pc, #156]	; (8000e00 <MX_GPIO_Init+0x11c>)
 8000d62:	f001 f93f 	bl	8001fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f001 f938 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000d7a:	f001 f933 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	481a      	ldr	r0, [pc, #104]	; (8000e00 <MX_GPIO_Init+0x11c>)
 8000d96:	f000 ff7b 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000d9a:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8000d9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_GPIO_Init+0x11c>)
 8000db4:	f000 ff6c 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000db8:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 ff5c 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_GPIO_Init+0x120>)
 8000df0:	f000 ff4e 	bl	8001c90 <HAL_GPIO_Init>

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000400 	.word	0x48000400

08000e08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_I2C1_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_I2C1_Init+0x7c>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e44:	f001 f900 	bl	8002048 <HAL_I2C_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4e:	f000 f981 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e56:	f001 ff63 	bl	8002d20 <HAL_I2CEx_ConfigAnalogFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 f978 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_I2C1_Init+0x74>)
 8000e68:	f001 ffa5 	bl	8002db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f96f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000b4 	.word	0x200000b4
 8000e80:	40005400 	.word	0x40005400
 8000e84:	00702991 	.word	0x00702991

08000e88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ac      	sub	sp, #176	; 0xb0
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2288      	movs	r2, #136	; 0x88
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 ff7b 	bl	8006da4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <HAL_I2C_MspInit+0xb0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d13a      	bne.n	8000f2e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fe27 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ed0:	f000 f940 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eec:	23c0      	movs	r3, #192	; 0xc0
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f04:	2304      	movs	r3, #4
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_I2C_MspInit+0xb8>)
 8000f12:	f000 febd 	bl	8001c90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_I2C_MspInit+0xb4>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	37b0      	adds	r7, #176	; 0xb0
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f48:	b0a2      	sub	sp, #136	; 0x88
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fc40 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f8af 	bl	80010b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f7ff fec6 	bl	8000ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f58:	f7ff fea6 	bl	8000ca8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f5c:	f000 fb82 	bl	8001664 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f60:	f000 fa12 	bl	8001388 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f64:	f000 fa6a 	bl	800143c <MX_TIM2_Init>
  MX_SPI2_Init();
 8000f68:	f000 f8fa 	bl	8001160 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000f6c:	f7ff ff4c 	bl	8000e08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_SensorStatus_t state = SENSOR_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  MPU6050_Sensor_t mpu6050 = {0};
 8000f76:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f7a:	2348      	movs	r3, #72	; 0x48
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f005 ff10 	bl	8006da4 <memset>
  mpu6050.AccelRange = ACCEL_SCALE_RANGE8G;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  mpu6050.GyroRange = GYRO_SCALE_RANGE500;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  mpu6050.BandWith = BAND_W44;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

  state = MPU6050_Begin(&mpu6050);
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fb64 	bl	8006668 <MPU6050_Begin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(SENSOR_ERROR == state)
 8000fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <main+0x76>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // detect error
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f001 f815 	bl	8001fe4 <HAL_GPIO_WritePin>

  uint8_t addr = MPU6050_Get_Device_Address();
 8000fba:	f005 fe31 	bl	8006c20 <MPU6050_Get_Device_Address>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  if(DEVICE_ADDR_AD0 != addr)
 8000fc4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000fc8:	2bd0      	cmp	r3, #208	; 0xd0
 8000fca:	d005      	beq.n	8000fd8 <main+0x94>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // detect error
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2120      	movs	r1, #32
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f001 f806 	bl	8001fe4 <HAL_GPIO_WritePin>

  MPU6050_Calibration(&mpu6050, 2000);
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fbc5 	bl	8006770 <MPU6050_Calibration>
  MPU6050_Read_Temp_Value(&mpu6050);
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fc84 	bl	80068f8 <MPU6050_Read_Temp_Value>
  MPU6050_Read_Value(&mpu6050);
 8000ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 fcbb 	bl	8006970 <MPU6050_Read_Value>


  uint64_t prev_time = HAL_GetTick();
 8000ffa:	f000 fc59 	bl	80018b0 <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2200      	movs	r2, #0
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	61fa      	str	r2, [r7, #28]
 8001006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800100a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  uint64_t time = HAL_GetTick();
 800100e:	f000 fc4f 	bl	80018b0 <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2200      	movs	r2, #0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	617a      	str	r2, [r7, #20]
 800101a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if(HAL_GetTick()-prev_time > 4){
 8001022:	f000 fc45 	bl	80018b0 <HAL_GetTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2200      	movs	r2, #0
 800102a:	469a      	mov	sl, r3
 800102c:	4693      	mov	fp, r2
 800102e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001032:	ebba 0402 	subs.w	r4, sl, r2
 8001036:	eb6b 0503 	sbc.w	r5, fp, r3
 800103a:	2c05      	cmp	r4, #5
 800103c:	f175 0300 	sbcs.w	r3, r5, #0
 8001040:	d313      	bcc.n	800106a <main+0x126>
			//MPU6050_Read_Value(&mpu6050);
	     	MPU6050_Read_Temp_Value(&mpu6050);
 8001042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fc56 	bl	80068f8 <MPU6050_Read_Temp_Value>
	     	MPU6050_Test(&mpu6050); //  TEST FUNC
 800104c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fd65 	bl	8006b20 <MPU6050_Test>
			prev_time = HAL_GetTick();
 8001056:	f000 fc2b 	bl	80018b0 <HAL_GetTick>
 800105a:	4603      	mov	r3, r0
 800105c:	2200      	movs	r2, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	60fa      	str	r2, [r7, #12]
 8001062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001066:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		}
		if(HAL_GetTick()-time > 1000){
 800106a:	f000 fc21 	bl	80018b0 <HAL_GetTick>
 800106e:	4603      	mov	r3, r0
 8001070:	2200      	movs	r2, #0
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	627a      	str	r2, [r7, #36]	; 0x24
 8001076:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800107a:	6a39      	ldr	r1, [r7, #32]
 800107c:	ebb1 0802 	subs.w	r8, r1, r2
 8001080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001082:	eb61 0903 	sbc.w	r9, r1, r3
 8001086:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800108a:	4598      	cmp	r8, r3
 800108c:	f179 0300 	sbcs.w	r3, r9, #0
 8001090:	d3c7      	bcc.n	8001022 <main+0xde>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001092:	2120      	movs	r1, #32
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f000 ffbc 	bl	8002014 <HAL_GPIO_TogglePin>
			time = HAL_GetTick();
 800109c:	f000 fc08 	bl	80018b0 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2200      	movs	r2, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ac:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		if(HAL_GetTick()-prev_time > 4){
 80010b0:	e7b7      	b.n	8001022 <main+0xde>

080010b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b096      	sub	sp, #88	; 0x58
 80010b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2244      	movs	r2, #68	; 0x44
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fe6f 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d8:	f001 fec8 	bl	8002e6c <HAL_PWREx_ControlVoltageScaling>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e2:	f000 f837 	bl	8001154 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f0:	2310      	movs	r3, #16
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001100:	230a      	movs	r3, #10
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001104:	2307      	movs	r3, #7
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f001 feff 	bl	8002f18 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001120:	f000 f818 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fac7 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001148:	f000 f804 	bl	8001154 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3758      	adds	r7, #88	; 0x58
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_SPI2_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <MX_SPI2_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_SPI2_Init+0x74>)
 800116c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001170:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_SPI2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_SPI2_Init+0x74>)
 800117a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800117e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_SPI2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_SPI2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_SPI2_Init+0x74>)
 800118e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001192:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_SPI2_Init+0x74>)
 8001196:	2220      	movs	r2, #32
 8001198:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_SPI2_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011ae:	2207      	movs	r2, #7
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_SPI2_Init+0x74>)
 80011c0:	f003 f966 	bl	8004490 <HAL_SPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f7ff ffc3 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000108 	.word	0x20000108
 80011d8:	40003800 	.word	0x40003800

080011dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_SPI_MspInit+0xb4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d144      	bne.n	8001288 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	4a24      	ldr	r2, [pc, #144]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6593      	str	r3, [r2, #88]	; 0x58
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_SPI_MspInit+0xb8>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001246:	230c      	movs	r3, #12
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001256:	2305      	movs	r3, #5
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <HAL_SPI_MspInit+0xbc>)
 8001262:	f000 fd15 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001278:	2305      	movs	r3, #5
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_SPI_MspInit+0xc0>)
 8001284:	f000 fd04 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40003800 	.word	0x40003800
 8001294:	40021000 	.word	0x40021000
 8001298:	48000800 	.word	0x48000800
 800129c:	48000400 	.word	0x48000400

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x44>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x44>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 faa8 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <DMA1_Channel1_IRQHandler+0x10>)
 8001342:	f000 fbf6 	bl	8001b32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000006c 	.word	0x2000006c

08001350 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM1_CC_IRQHandler+0x10>)
 8001356:	f003 fa4d 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000016c 	.word	0x2000016c

08001364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MX_TIM1_Init+0xac>)
 80013a8:	4a23      	ldr	r2, [pc, #140]	; (8001438 <MX_TIM1_Init+0xb0>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_TIM1_Init+0xac>)
 80013ae:	224f      	movs	r2, #79	; 0x4f
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <MX_TIM1_Init+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM1_Init+0xac>)
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_TIM1_Init+0xac>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_TIM1_Init+0xac>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_TIM1_Init+0xac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM1_Init+0xac>)
 80013d4:	f003 f9b7 	bl	8004746 <HAL_TIM_IC_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013de:	f7ff feb9 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <MX_TIM1_Init+0xac>)
 80013f6:	f004 fb31 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001400:	f7ff fea8 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM1_Init+0xac>)
 800141c:	f003 fb09 	bl	8004a32 <HAL_TIM_IC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001426:	f7ff fe95 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000016c 	.word	0x2000016c
 8001438:	40012c00 	.word	0x40012c00

0800143c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001474:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001478:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800147c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001486:	2264      	movs	r2, #100	; 0x64
 8001488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM2_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001496:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001498:	f003 f89d 	bl	80045d6 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f7ff fe57 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014b4:	f003 fc6e 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014be:	f7ff fe49 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014c4:	f003 f8de 	bl	8004684 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ce:	f7ff fe41 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_TIM2_Init+0xe8>)
 80014e2:	f004 fabb 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014ec:	f7ff fe32 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	2204      	movs	r2, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001508:	f003 fb30 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001512:	f7ff fe1f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM2_Init+0xe8>)
 8001518:	f000 f870 	bl	80015fc <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200001b8 	.word	0x200001b8

08001528 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_TIM_IC_MspInit+0x90>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d131      	bne.n	80015ae <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 8001550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_TIM_IC_MspInit+0x94>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800158c:	2301      	movs	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f000 fb79 	bl	8001c90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201b      	movs	r0, #27
 80015a4:	f000 fa8f 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015a8:	201b      	movs	r0, #27
 80015aa:	f000 faa8 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40012c00 	.word	0x40012c00
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d10b      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_TIM_Base_MspInit+0x38>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_TIM_Base_MspInit+0x38>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_TIM_Base_MspInit+0x38>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d11c      	bne.n	8001658 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_TIM_MspPostInit+0x64>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_TIM_MspPostInit+0x64>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_TIM_MspPostInit+0x64>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001636:	2302      	movs	r3, #2
 8001638:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001646:	2301      	movs	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f000 fb1c 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <MX_USART2_UART_Init+0x5c>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART2_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART2_UART_Init+0x58>)
 80016a8:	f004 fa7e 	bl	8005ba8 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016b2:	f7ff fd4f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000204 	.word	0x20000204
 80016c0:	40004400 	.word	0x40004400

080016c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ac      	sub	sp, #176	; 0xb0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2288      	movs	r2, #136	; 0x88
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fb5d 	bl	8006da4 <memset>
  if(uartHandle->Instance==USART2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_UART_MspInit+0xb0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d13b      	bne.n	800176c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fa09 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800170c:	f7ff fd22 	bl	8001154 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_UART_MspInit+0xb4>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_UART_MspInit+0xb4>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6593      	str	r3, [r2, #88]	; 0x58
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_UART_MspInit+0xb4>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_UART_MspInit+0xb4>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_UART_MspInit+0xb4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_UART_MspInit+0xb4>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001740:	230c      	movs	r3, #12
 8001742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f000 fa92 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800176c:	bf00      	nop
 800176e:	37b0      	adds	r7, #176	; 0xb0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40004400 	.word	0x40004400
 8001778:	40021000 	.word	0x40021000

0800177c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff fdf0 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	; (80017bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	; (80017c8 <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f005 fad7 	bl	8006d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ae:	f7ff fbc9 	bl	8000f44 <main>

080017b2 <LoopForever>:

LoopForever:
    b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80017c0:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 80017c4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80017c8:	200002b4 	.word	0x200002b4

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_Init+0x3c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x3c>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f000 f962 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ec:	2000      	movs	r0, #0
 80017ee:	f000 f80f 	bl	8001810 <HAL_InitTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	e001      	b.n	8001802 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017fe:	f7ff fd4f 	bl	80012a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001802:	79fb      	ldrb	r3, [r7, #7]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_InitTick+0x6c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_InitTick+0x70>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_InitTick+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f96d 	bl	8001b1a <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d809      	bhi.n	8001860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f937 	bl	8001ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0x74>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e007      	b.n	8001870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e004      	b.n	8001870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e001      	b.n	8001870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000288 	.word	0x20000288

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000288 	.word	0x20000288

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 031c 	and.w	r3, r3, #28
 8001b52:	2204      	movs	r2, #4
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d026      	beq.n	8001bac <HAL_DMA_IRQHandler+0x7a>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d021      	beq.n	8001bac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d107      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0204 	bic.w	r2, r2, #4
 8001b84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 021c 	and.w	r2, r3, #28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2104      	movs	r1, #4
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d071      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001baa:	e06c      	b.n	8001c86 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 031c 	and.w	r3, r3, #28
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02e      	beq.n	8001c1e <HAL_DMA_IRQHandler+0xec>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d029      	beq.n	8001c1e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 020a 	bic.w	r2, r2, #10
 8001be6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f003 021c 	and.w	r2, r3, #28
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d038      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c1c:	e033      	b.n	8001c86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f003 031c 	and.w	r3, r3, #28
 8001c26:	2208      	movs	r2, #8
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d02a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x156>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d025      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020e 	bic.w	r2, r2, #14
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f003 021c 	and.w	r2, r3, #28
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
}
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	e17f      	b.n	8001fa0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8171 	beq.w	8001f9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x40>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d118      	bne.n	8001d70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d44:	2201      	movs	r2, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f003 0201 	and.w	r2, r3, #1
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d017      	beq.n	8001dac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d123      	bne.n	8001e00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	220f      	movs	r2, #15
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	6939      	ldr	r1, [r7, #16]
 8001dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80ac 	beq.w	8001f9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_GPIO_Init+0x330>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_GPIO_Init+0x330>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_GPIO_Init+0x330>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_GPIO_Init+0x334>)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x242>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <HAL_GPIO_Init+0x338>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x23e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4e      	ldr	r2, [pc, #312]	; (8001fcc <HAL_GPIO_Init+0x33c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x23a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <HAL_GPIO_Init+0x340>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x236>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	; (8001fd4 <HAL_GPIO_Init+0x344>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x232>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4b      	ldr	r2, [pc, #300]	; (8001fd8 <HAL_GPIO_Init+0x348>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x22e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <HAL_GPIO_Init+0x34c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x22a>
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x244>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_GPIO_Init+0x334>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f16:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <HAL_GPIO_Init+0x350>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f ae78 	bne.w	8001ca0 <HAL_GPIO_Init+0x10>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	48000400 	.word	0x48000400
 8001fcc:	48000800 	.word	0x48000800
 8001fd0:	48000c00 	.word	0x48000c00
 8001fd4:	48001000 	.word	0x48001000
 8001fd8:	48001400 	.word	0x48001400
 8001fdc:	48001800 	.word	0x48001800
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43d9      	mvns	r1, r3
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	400b      	ands	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e081      	b.n	800215e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe ff0a 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d104      	bne.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69d9      	ldr	r1, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 80f9 	bne.w	8002382 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_I2C_Mem_Write+0x34>
 8002196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0ed      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Mem_Write+0x4e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0e6      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021be:	f7ff fb77 	bl	80018b0 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fbcb 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d1      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2221      	movs	r2, #33	; 0x21
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002208:	88f8      	ldrh	r0, [r7, #6]
 800220a:	893a      	ldrh	r2, [r7, #8]
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4603      	mov	r3, r0
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fadb 	bl	80027d4 <I2C_RequestMemoryWrite>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0a9      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d90e      	bls.n	8002258 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	2300      	movs	r3, #0
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fd33 	bl	8002cbc <I2C_TransferConfig>
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	b2da      	uxtb	r2, r3
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fd22 	bl	8002cbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fbb5 	bl	80029ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e07b      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d034      	beq.n	8002330 <HAL_I2C_Mem_Write+0x1c8>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d130      	bne.n	8002330 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fb47 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e04d      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	d90e      	bls.n	8002310 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	8979      	ldrh	r1, [r7, #10]
 8002300:	2300      	movs	r3, #0
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fcd7 	bl	8002cbc <I2C_TransferConfig>
 800230e:	e00f      	b.n	8002330 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	b2da      	uxtb	r2, r3
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fcc6 	bl	8002cbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d19e      	bne.n	8002278 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fb94 	bl	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e01a      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2220      	movs	r2, #32
 8002354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_I2C_Mem_Write+0x224>)
 8002362:	400b      	ands	r3, r1
 8002364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	fe00e800 	.word	0xfe00e800

08002390 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	817b      	strh	r3, [r7, #10]
 80023a2:	460b      	mov	r3, r1
 80023a4:	813b      	strh	r3, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	f040 80fd 	bne.w	80025b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x34>
 80023be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0f1      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Mem_Read+0x4e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0ea      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e6:	f7ff fa63 	bl	80018b0 <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fab7 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d5      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2222      	movs	r2, #34	; 0x22
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002430:	88f8      	ldrh	r0, [r7, #6]
 8002432:	893a      	ldrh	r2, [r7, #8]
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4603      	mov	r3, r0
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fa1b 	bl	800287c <I2C_RequestMemoryRead>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0ad      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d90e      	bls.n	8002480 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_I2C_Mem_Read+0x22c>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fc1f 	bl	8002cbc <I2C_TransferConfig>
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	b2da      	uxtb	r2, r3
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_I2C_Mem_Read+0x22c>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fc0e 	bl	8002cbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	2200      	movs	r2, #0
 80024a8:	2104      	movs	r1, #4
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fa5e 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07c      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d034      	beq.n	8002560 <HAL_I2C_Mem_Read+0x1d0>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d130      	bne.n	8002560 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fa2f 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e04d      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d90e      	bls.n	8002540 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fbbf 	bl	8002cbc <I2C_TransferConfig>
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fbae 	bl	8002cbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d19a      	bne.n	80024a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa7c 	bl	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e01a      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_I2C_Mem_Read+0x230>)
 8002592:	400b      	ands	r3, r1
 8002594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	80002400 	.word	0x80002400
 80025c0:	fe00e800 	.word	0xfe00e800

080025c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	f040 80f1 	bne.w	80027c8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	d101      	bne.n	80025fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_I2C_IsDeviceReady+0x44>
 8002604:	2302      	movs	r3, #2
 8002606:	e0e0      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_I2C_IsDeviceReady+0x72>
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002634:	e004      	b.n	8002640 <HAL_I2C_IsDeviceReady+0x7c>
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002646:	f7ff f933 	bl	80018b0 <HAL_GetTick>
 800264a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b20      	cmp	r3, #32
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002678:	e034      	b.n	80026e4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d01a      	beq.n	80026b8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff f915 	bl	80018b0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <HAL_I2C_IsDeviceReady+0xd4>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e088      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_I2C_IsDeviceReady+0x12c>
 80026ea:	7fbb      	ldrb	r3, [r7, #30]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0c4      	beq.n	800267a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d01a      	beq.n	8002734 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2120      	movs	r1, #32
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f92f 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e058      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2220      	movs	r2, #32
 800271e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e04a      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	2120      	movs	r1, #32
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f914 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03d      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d118      	bne.n	8002798 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002774:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	2120      	movs	r1, #32
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f8f3 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01c      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2220      	movs	r2, #32
 8002796:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f63f af3b 	bhi.w	800261e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	460b      	mov	r3, r1
 80027e8:	813b      	strh	r3, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <I2C_RequestMemoryWrite+0xa4>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa5d 	bl	8002cbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f8f0 	bl	80029ec <I2C_WaitOnTXISFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e02c      	b.n	8002870 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
 8002826:	e015      	b.n	8002854 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f8d6 	bl	80029ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e012      	b.n	8002870 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284a:	893b      	ldrh	r3, [r7, #8]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2200      	movs	r2, #0
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f884 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	80002000 	.word	0x80002000

0800287c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	460b      	mov	r3, r1
 8002890:	813b      	strh	r3, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <I2C_RequestMemoryRead+0xa4>)
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2300      	movs	r3, #0
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa0a 	bl	8002cbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f89d 	bl	80029ec <I2C_WaitOnTXISFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e02c      	b.n	8002916 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c2:	893b      	ldrh	r3, [r7, #8]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	e015      	b.n	80028fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028ce:	893b      	ldrh	r3, [r7, #8]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f883 	bl	80029ec <I2C_WaitOnTXISFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e012      	b.n	8002916 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2200      	movs	r2, #0
 8002902:	2140      	movs	r1, #64	; 0x40
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f831 	bl	800296c <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	80002000 	.word	0x80002000

08002924 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d103      	bne.n	8002942 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d007      	beq.n	8002960 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	619a      	str	r2, [r3, #24]
  }
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297c:	e022      	b.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d01e      	beq.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe ff93 	bl	80018b0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d113      	bne.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e00f      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4013      	ands	r3, r2
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d0cd      	beq.n	800297e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029f8:	e02c      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f870 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e02a      	b.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d01e      	beq.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7fe ff4b 	bl	80018b0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d113      	bne.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d1cb      	bne.n	80029fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a78:	e028      	b.n	8002acc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f830 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e026      	b.n	8002adc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe ff0f 	bl	80018b0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d113      	bne.n	8002acc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e007      	b.n	8002adc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d1cf      	bne.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d075      	beq.n	8002bfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b18:	e056      	b.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d052      	beq.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe fec5 	bl	80018b0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_IsErrorOccurred+0x54>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d147      	bne.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5a:	d12e      	bne.n	8002bba <I2C_IsErrorOccurred+0xd6>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b62:	d02a      	beq.n	8002bba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d027      	beq.n	8002bba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b7a:	f7fe fe99 	bl	80018b0 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	e01b      	b.n	8002bba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7fe fe95 	bl	80018b0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b19      	cmp	r3, #25
 8002b8e:	d914      	bls.n	8002bba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d1dc      	bne.n	8002b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d003      	beq.n	8002bde <I2C_IsErrorOccurred+0xfa>
 8002bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d09d      	beq.n	8002b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2220      	movs	r2, #32
 8002bec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01c      	beq.n	8002cac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff fe56 	bl	8002924 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <I2C_IsErrorOccurred+0x1d4>)
 8002c84:	400b      	ands	r3, r1
 8002c86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd4:	7a7b      	ldrb	r3, [r7, #9]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <I2C_TransferConfig+0x60>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	ea02 0103 	and.w	r1, r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	03ff63ff 	.word	0x03ff63ff

08002d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d138      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e032      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d139      	bne.n	8002e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e033      	b.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2224      	movs	r2, #36	; 0x24
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000

08002e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d130      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e88:	d038      	beq.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2232      	movs	r2, #50	; 0x32
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0c9b      	lsrs	r3, r3, #18
 8002eac:	3301      	adds	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb0:	e002      	b.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d102      	bne.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f2      	bne.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d110      	bne.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e00f      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d007      	beq.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	20000000 	.word	0x20000000
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e3ca      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2a:	4b97      	ldr	r3, [pc, #604]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f34:	4b94      	ldr	r3, [pc, #592]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80e4 	beq.w	8003114 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4a>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f040 808b 	bne.w	8003070 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	f040 8087 	bne.w	8003070 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f62:	4b89      	ldr	r3, [pc, #548]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e3a2      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1a      	ldr	r2, [r3, #32]
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_RCC_OscConfig+0x7c>
 8002f8a:	4b7f      	ldr	r3, [pc, #508]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f92:	e005      	b.n	8002fa0 <HAL_RCC_OscConfig+0x88>
 8002f94:	4b7c      	ldr	r3, [pc, #496]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d223      	bcs.n	8002fec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fd55 	bl	8003a58 <RCC_SetFlashLatencyFromMSIRange>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e383      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b73      	ldr	r3, [pc, #460]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a72      	ldr	r2, [pc, #456]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	496d      	ldr	r1, [pc, #436]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	4968      	ldr	r1, [pc, #416]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	e025      	b.n	8003038 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a65      	ldr	r2, [pc, #404]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4960      	ldr	r1, [pc, #384]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300a:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	495b      	ldr	r1, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fd15 	bl	8003a58 <RCC_SetFlashLatencyFromMSIRange>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e343      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003038:	f000 fc4a 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4950      	ldr	r1, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x274>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_RCC_OscConfig+0x278>)
 8003056:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003058:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_RCC_OscConfig+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fbd7 	bl	8001810 <HAL_InitTick>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d052      	beq.n	8003112 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	e327      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d032      	beq.n	80030de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003078:	4b43      	ldr	r3, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a42      	ldr	r2, [pc, #264]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003084:	f7fe fc14 	bl	80018b0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800308c:	f7fe fc10 	bl	80018b0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e310      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309e:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a36      	ldr	r2, [pc, #216]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4931      	ldr	r1, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	492c      	ldr	r1, [pc, #176]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e01a      	b.n	8003114 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fbe1 	bl	80018b0 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f2:	f7fe fbdd 	bl	80018b0 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e2dd      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x1da>
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003112:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d074      	beq.n	800320a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x21a>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d10e      	bne.n	800314a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d10b      	bne.n	800314a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d064      	beq.n	8003208 <HAL_RCC_OscConfig+0x2f0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d160      	bne.n	8003208 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e2ba      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x24a>
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e026      	b.n	80031b0 <HAL_RCC_OscConfig+0x298>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316a:	d115      	bne.n	8003198 <HAL_RCC_OscConfig+0x280>
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a02      	ldr	r2, [pc, #8]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x298>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	08006dcc 	.word	0x08006dcc
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004
 8003198:	4ba0      	ldr	r3, [pc, #640]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a9f      	ldr	r2, [pc, #636]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b9d      	ldr	r3, [pc, #628]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a9c      	ldr	r2, [pc, #624]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fb7a 	bl	80018b0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fb76 	bl	80018b0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e276      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2a8>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fb66 	bl	80018b0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fb62 	bl	80018b0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e262      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d0>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d060      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x310>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d119      	bne.n	8003256 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d116      	bne.n	8003256 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x328>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e23f      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	4973      	ldr	r1, [pc, #460]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003254:	e040      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d023      	beq.n	80032a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fb21 	bl	80018b0 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fb1d 	bl	80018b0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e21d      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	495f      	ldr	r1, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
 80032a4:	e018      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5c      	ldr	r2, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fafd 	bl	80018b0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe faf9 	bl	80018b0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1f9      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03c      	beq.n	800335e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f2:	4a4a      	ldr	r2, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fad8 	bl	80018b0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fad4 	bl	80018b0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1d4      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCC_OscConfig+0x3ec>
 8003324:	e01b      	b.n	800335e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fabb 	bl	80018b0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe fab7 	bl	80018b0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1b7      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a6 	beq.w	80034b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10d      	bne.n	8003398 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6593      	str	r3, [r2, #88]	; 0x58
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003394:	2301      	movs	r3, #1
 8003396:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d118      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fa7e 	bl	80018b0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b8:	f7fe fa7a 	bl	80018b0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e17a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4d8>
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ee:	e029      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_OscConfig+0x50c>
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003418:	e014      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	4b9c      	ldr	r3, [pc, #624]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a9b      	ldr	r2, [pc, #620]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003434:	4b98      	ldr	r3, [pc, #608]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a97      	ldr	r2, [pc, #604]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fa30 	bl	80018b0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fa2c 	bl	80018b0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e12a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ed      	beq.n	8003454 <HAL_RCC_OscConfig+0x53c>
 8003478:	e015      	b.n	80034a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fa19 	bl	80018b0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fa15 	bl	80018b0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e113      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ed      	bne.n	8003482 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a79      	ldr	r2, [pc, #484]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80fe 	beq.w	80036be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	f040 80d0 	bne.w	800366c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d130      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	3b01      	subs	r3, #1
 80034ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d127      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d11f      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350c:	2a07      	cmp	r2, #7
 800350e:	bf14      	ite	ne
 8003510:	2201      	movne	r2, #1
 8003512:	2200      	moveq	r2, #0
 8003514:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003516:	4293      	cmp	r3, r2
 8003518:	d113      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d109      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d06e      	beq.n	8003620 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d069      	beq.n	800361c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ad      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003570:	f7fe f99e 	bl	80018b0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f99a 	bl	80018b0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e09a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003596:	4b40      	ldr	r3, [pc, #256]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x784>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035a6:	3a01      	subs	r2, #1
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b0:	0212      	lsls	r2, r2, #8
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0552      	lsls	r2, r2, #21
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0652      	lsls	r2, r2, #25
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d0:	0912      	lsrs	r2, r2, #4
 80035d2:	0452      	lsls	r2, r2, #17
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4930      	ldr	r1, [pc, #192]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fe f95c 	bl	80018b0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe f958 	bl	80018b0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e058      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361a:	e050      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04f      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d148      	bne.n	80036be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003644:	f7fe f934 	bl	80018b0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe f930 	bl	80018b0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e030      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x734>
 800366a:	e028      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe f917 	bl	80018b0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	e00c      	b.n	80036a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe f913 	bl	80018b0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d905      	bls.n	80036a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e013      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
 8003698:	40021000 	.word	0x40021000
 800369c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ec      	bne.n	8003686 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4905      	ldr	r1, [pc, #20]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x7b4>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
 80036b8:	e001      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	feeefffc 	.word	0xfeeefffc

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0e7      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b75      	ldr	r3, [pc, #468]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4970      	ldr	r1, [pc, #448]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b6e      	ldr	r3, [pc, #440]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0cf      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4960      	ldr	r1, [pc, #384]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04c      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d121      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0a6      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e09a      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e08e      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e086      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4943      	ldr	r1, [pc, #268]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe f87a 	bl	80018b0 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe f876 	bl	80018b0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e06e      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003800:	429a      	cmp	r2, r3
 8003802:	d208      	bcs.n	8003816 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	492b      	ldr	r1, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d210      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0207 	bic.w	r2, r3, #7
 800382c:	4923      	ldr	r1, [pc, #140]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003834:	4b21      	ldr	r3, [pc, #132]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e036      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4918      	ldr	r1, [pc, #96]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4910      	ldr	r1, [pc, #64]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003884:	f000 f824 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	490b      	ldr	r1, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1f8>)
 80038a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1fc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd ffb1 	bl	8001810 <HAL_InitTick>
 80038ae:	4603      	mov	r3, r0
 80038b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038b2:	7afb      	ldrb	r3, [r7, #11]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08006dcc 	.word	0x08006dcc
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d11e      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e005      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e004      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d101      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003956:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d134      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0xa6>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d003      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0xac>
 8003974:	e005      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003978:	617b      	str	r3, [r7, #20]
      break;
 800397a:	e005      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	617b      	str	r3, [r7, #20]
      break;
 8003980:	e002      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0e5b      	lsrs	r3, r3, #25
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	3301      	adds	r3, #1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039c8:	69bb      	ldr	r3, [r7, #24]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08006de4 	.word	0x08006de4
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08006ddc 	.word	0x08006ddc

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a30:	f7ff ffda 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4904      	ldr	r1, [pc, #16]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	08006ddc 	.word	0x08006ddc

08003a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a70:	f7ff f9ee 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003a74:	6178      	str	r0, [r7, #20]
 8003a76:	e014      	b.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6593      	str	r3, [r2, #88]	; 0x58
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a90:	f7ff f9de 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003a94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa8:	d10b      	bne.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b80      	cmp	r3, #128	; 0x80
 8003aae:	d919      	bls.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ab4:	d902      	bls.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e013      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003abc:	2301      	movs	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e010      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d902      	bls.n	8003ace <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ac8:	2303      	movs	r3, #3
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e00a      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d102      	bne.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e004      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d101      	bne.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4909      	ldr	r1, [pc, #36]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40022000 	.word	0x40022000

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d041      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b3c:	d02a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b42:	d824      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b4e:	d81e      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b58:	d010      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b5a:	e018      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b5c:	4b86      	ldr	r3, [pc, #536]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a85      	ldr	r2, [pc, #532]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b68:	e015      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fabb 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7a:	e00c      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3320      	adds	r3, #32
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fba6 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	74fb      	strb	r3, [r7, #19]
      break;
 8003b92:	e000      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9c:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003baa:	4973      	ldr	r1, [pc, #460]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bb2:	e001      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d041      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bcc:	d02a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bd2:	d824      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd8:	d008      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bde:	d81e      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d010      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bea:	e018      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bec:	4b62      	ldr	r3, [pc, #392]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf8:	e015      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fa73 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c0a:	e00c      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3320      	adds	r3, #32
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fb5e 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1c:	e003      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	74fb      	strb	r3, [r7, #19]
      break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c2c:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3a:	494f      	ldr	r1, [pc, #316]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a0 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c98:	f7fd fe0a 	bl	80018b0 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fd fe06 	bl	80018b0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d15c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d019      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cf0:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd fdc5 	bl	80018b0 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	e00b      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fdc1 	bl	80018b0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d902      	bls.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ec      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d84:	7c7b      	ldrb	r3, [r7, #17]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b9e      	ldr	r3, [pc, #632]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	4a9d      	ldr	r2, [pc, #628]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da2:	4b98      	ldr	r3, [pc, #608]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	4994      	ldr	r1, [pc, #592]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc4:	4b8f      	ldr	r3, [pc, #572]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 020c 	bic.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	498c      	ldr	r1, [pc, #560]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de6:	4b87      	ldr	r3, [pc, #540]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4983      	ldr	r1, [pc, #524]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e08:	4b7e      	ldr	r3, [pc, #504]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	497b      	ldr	r1, [pc, #492]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	4972      	ldr	r1, [pc, #456]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	496a      	ldr	r1, [pc, #424]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	4961      	ldr	r1, [pc, #388]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e90:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	4959      	ldr	r1, [pc, #356]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	4950      	ldr	r1, [pc, #320]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	4948      	ldr	r1, [pc, #288]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	493f      	ldr	r1, [pc, #252]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d028      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f18:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f26:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a31      	ldr	r2, [pc, #196]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f42:	60d3      	str	r3, [r2, #12]
 8003f44:	e011      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	2101      	movs	r1, #1
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8c8 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d028      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	491f      	ldr	r1, [pc, #124]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa0:	60d3      	str	r3, [r2, #12]
 8003fa2:	e011      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f899 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff2:	d109      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a02      	ldr	r2, [pc, #8]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
 8004000:	e014      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004010:	d10c      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f867 	bl	80040ec <RCCEx_PLLSAI1_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	4928      	ldr	r1, [pc, #160]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f844 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d014      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	74bb      	strb	r3, [r7, #18]
 8004072:	e011      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3320      	adds	r3, #32
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f925 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040de:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000

080040ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040fa:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004106:	4b72      	ldr	r3, [pc, #456]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0203 	and.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
       ||
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800411e:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
       ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d047      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	e044      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d018      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x86>
 8004140:	2b03      	cmp	r3, #3
 8004142:	d825      	bhi.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x62>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d009      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x74>
 800414c:	e020      	b.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414e:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e01a      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d116      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e013      	b.n	800419a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004172:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417e:	4b54      	ldr	r3, [pc, #336]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418e:	e006      	b.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e004      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4944      	ldr	r1, [pc, #272]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d17d      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fb6c 	bl	80018b0 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041da:	e009      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041dc:	f7fd fb68 	bl	80018b0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d902      	bls.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	73fb      	strb	r3, [r7, #15]
        break;
 80041ee:	e005      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ef      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d160      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6892      	ldr	r2, [r2, #8]
 8004218:	0211      	lsls	r1, r2, #8
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	0912      	lsrs	r2, r2, #4
 8004220:	0452      	lsls	r2, r2, #17
 8004222:	430a      	orrs	r2, r1
 8004224:	492a      	ldr	r1, [pc, #168]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
 800422a:	e027      	b.n	800427c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d112      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800423a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6892      	ldr	r2, [r2, #8]
 8004242:	0211      	lsls	r1, r2, #8
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6912      	ldr	r2, [r2, #16]
 8004248:	0852      	lsrs	r2, r2, #1
 800424a:	3a01      	subs	r2, #1
 800424c:	0552      	lsls	r2, r2, #21
 800424e:	430a      	orrs	r2, r1
 8004250:	491f      	ldr	r1, [pc, #124]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	610b      	str	r3, [r1, #16]
 8004256:	e011      	b.n	800427c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6952      	ldr	r2, [r2, #20]
 800426e:	0852      	lsrs	r2, r2, #1
 8004270:	3a01      	subs	r2, #1
 8004272:	0652      	lsls	r2, r2, #25
 8004274:	430a      	orrs	r2, r1
 8004276:	4916      	ldr	r1, [pc, #88]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fb12 	bl	80018b0 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428e:	e009      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004290:	f7fd fb0e 	bl	80018b0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	73fb      	strb	r3, [r7, #15]
          break;
 80042a2:	e005      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	4904      	ldr	r1, [pc, #16]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10d      	bne.n	800431a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
       ||
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004306:	4b61      	ldr	r3, [pc, #388]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
       ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d047      	beq.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
 800431e:	e044      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d018      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x86>
 8004328:	2b03      	cmp	r3, #3
 800432a:	d825      	bhi.n	8004378 <RCCEx_PLLSAI2_Config+0xa4>
 800432c:	2b01      	cmp	r3, #1
 800432e:	d002      	beq.n	8004336 <RCCEx_PLLSAI2_Config+0x62>
 8004330:	2b02      	cmp	r3, #2
 8004332:	d009      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x74>
 8004334:	e020      	b.n	8004378 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004336:	4b55      	ldr	r3, [pc, #340]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004346:	e01a      	b.n	800437e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d116      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e013      	b.n	8004382 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435a:	4b4c      	ldr	r3, [pc, #304]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004366:	4b49      	ldr	r3, [pc, #292]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004376:	e006      	b.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e004      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004386:	bf00      	nop
    }

    if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	430b      	orrs	r3, r1
 80043a4:	4939      	ldr	r1, [pc, #228]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d167      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a35      	ldr	r2, [pc, #212]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fd fa78 	bl	80018b0 <HAL_GetTick>
 80043c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043c2:	e009      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c4:	f7fd fa74 	bl	80018b0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d902      	bls.n	80043d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	73fb      	strb	r3, [r7, #15]
        break;
 80043d6:	e005      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ef      	bne.n	80043c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d14a      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d111      	bne.n	8004414 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6892      	ldr	r2, [r2, #8]
 8004400:	0211      	lsls	r1, r2, #8
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	0912      	lsrs	r2, r2, #4
 8004408:	0452      	lsls	r2, r2, #17
 800440a:	430a      	orrs	r2, r1
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	614b      	str	r3, [r1, #20]
 8004412:	e011      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800441c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	0211      	lsls	r1, r2, #8
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6912      	ldr	r2, [r2, #16]
 800442a:	0852      	lsrs	r2, r2, #1
 800442c:	3a01      	subs	r2, #1
 800442e:	0652      	lsls	r2, r2, #25
 8004430:	430a      	orrs	r2, r1
 8004432:	4916      	ldr	r1, [pc, #88]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004434:	4313      	orrs	r3, r2
 8004436:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fd fa34 	bl	80018b0 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444a:	e009      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800444c:	f7fd fa30 	bl	80018b0 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	73fb      	strb	r3, [r7, #15]
          break;
 800445e:	e005      	b.n	800446c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ef      	beq.n	800444c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e095      	b.n	80045ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d009      	beq.n	80044c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
 80044ba:	e005      	b.n	80044c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fe7a 	bl	80011dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004508:	d902      	bls.n	8004510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e002      	b.n	8004516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Init+0xa0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0204 	and.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e049      	b.n	800467c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fc ffdf 	bl	80015c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f000 fcf3 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e049      	b.n	800472a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f841 	bl	8004732 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f000 fc9c 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e049      	b.n	80047ec <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fc fedb 	bl	8001528 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f000 fc3b 	bl	8005000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0202 	mvn.w	r2, #2
 8004820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f002 fa0e 	bl	8006c58 <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fbc0 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fbc7 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f002 f9e4 	bl	8006c58 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb96 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb9d 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0208 	mvn.w	r2, #8
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f002 f9ba 	bl	8006c58 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fb6c 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb73 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b10      	cmp	r3, #16
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2208      	movs	r2, #8
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f002 f990 	bl	8006c58 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb42 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fb49 	bl	8004fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0201 	mvn.w	r2, #1
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb1c 	bl	8004fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 f8ee 	bl	8005b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	d10e      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d107      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f8e1 	bl	8005b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d10e      	bne.n	80049fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 faf7 	bl	8004fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d10e      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0220 	mvn.w	r2, #32
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 f8a1 	bl	8005b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e088      	b.n	8004b62 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11b      	bne.n	8004a96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f000 fe37 	bl	80056e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 020c 	bic.w	r2, r2, #12
 8004a80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6999      	ldr	r1, [r3, #24]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
 8004a94:	e060      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11c      	bne.n	8004ad6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f000 feb5 	bl	800581a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004abe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	619a      	str	r2, [r3, #24]
 8004ad4:	e040      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f000 ff02 	bl	80058f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 020c 	bic.w	r2, r2, #12
 8004afe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69d9      	ldr	r1, [r3, #28]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	61da      	str	r2, [r3, #28]
 8004b12:	e021      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d11c      	bne.n	8004b54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f000 ff1f 	bl	800596c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69d9      	ldr	r1, [r3, #28]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	021a      	lsls	r2, r3, #8
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	61da      	str	r2, [r3, #28]
 8004b52:	e001      	b.n	8004b58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0ff      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b14      	cmp	r3, #20
 8004b96:	f200 80f0 	bhi.w	8004d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004d7b 	.word	0x08004d7b
 8004ba8:	08004d7b 	.word	0x08004d7b
 8004bac:	08004d7b 	.word	0x08004d7b
 8004bb0:	08004c35 	.word	0x08004c35
 8004bb4:	08004d7b 	.word	0x08004d7b
 8004bb8:	08004d7b 	.word	0x08004d7b
 8004bbc:	08004d7b 	.word	0x08004d7b
 8004bc0:	08004c77 	.word	0x08004c77
 8004bc4:	08004d7b 	.word	0x08004d7b
 8004bc8:	08004d7b 	.word	0x08004d7b
 8004bcc:	08004d7b 	.word	0x08004d7b
 8004bd0:	08004cb7 	.word	0x08004cb7
 8004bd4:	08004d7b 	.word	0x08004d7b
 8004bd8:	08004d7b 	.word	0x08004d7b
 8004bdc:	08004d7b 	.word	0x08004d7b
 8004be0:	08004cf9 	.word	0x08004cf9
 8004be4:	08004d7b 	.word	0x08004d7b
 8004be8:	08004d7b 	.word	0x08004d7b
 8004bec:	08004d7b 	.word	0x08004d7b
 8004bf0:	08004d39 	.word	0x08004d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fa9a 	bl	8005134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0208 	orr.w	r2, r2, #8
 8004c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6999      	ldr	r1, [r3, #24]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	619a      	str	r2, [r3, #24]
      break;
 8004c32:	e0a5      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb0a 	bl	8005254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6999      	ldr	r1, [r3, #24]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	021a      	lsls	r2, r3, #8
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	619a      	str	r2, [r3, #24]
      break;
 8004c74:	e084      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fb73 	bl	8005368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0208 	orr.w	r2, r2, #8
 8004c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0204 	bic.w	r2, r2, #4
 8004ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69d9      	ldr	r1, [r3, #28]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	61da      	str	r2, [r3, #28]
      break;
 8004cb4:	e064      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fbdb 	bl	8005478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69d9      	ldr	r1, [r3, #28]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	021a      	lsls	r2, r3, #8
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	61da      	str	r2, [r3, #28]
      break;
 8004cf6:	e043      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fc24 	bl	800554c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0208 	orr.w	r2, r2, #8
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d36:	e023      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fc68 	bl	8005614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop

08004d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0b6      	b.n	8004f1e <HAL_TIM_ConfigClockSource+0x18a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d03e      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xd8>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df2:	f200 8087 	bhi.w	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	f000 8086 	beq.w	8004f0a <HAL_TIM_ConfigClockSource+0x176>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d87f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d01a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xaa>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d87b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d050      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x11e>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d877      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d03c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xfe>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d873      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d058      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x13e>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d86f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d064      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d86b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d060      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d867      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d05a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3c:	e062      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 fde5 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e04f      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f000 fdce 	bl	8005a1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8e:	609a      	str	r2, [r3, #8]
      break;
 8004e90:	e03c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fc8c 	bl	80057bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2150      	movs	r1, #80	; 0x50
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd9b 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e02c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fce8 	bl	8005894 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2160      	movs	r1, #96	; 0x60
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fd8b 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e01c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fc6c 	bl	80057bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fd7b 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e00c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 fd72 	bl	80059e6 <TIM_ITRx_SetConfig>
      break;
 8004f02:	e003      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e000      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	d831      	bhi.n	8004fa0 <HAL_TIM_ReadCapturedValue+0x78>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f79 	.word	0x08004f79
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004fa1 	.word	0x08004fa1
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	60fb      	str	r3, [r7, #12]

      break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	60fb      	str	r3, [r7, #12]

      break;
 8004f8a:	e00a      	b.n	8004fa2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	60fb      	str	r3, [r7, #12]

      break;
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	60fb      	str	r3, [r7, #12]

      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fa0:	bf00      	nop
  }

  return tmpreg;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a40      	ldr	r2, [pc, #256]	; (8005114 <TIM_Base_SetConfig+0x114>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501e:	d00f      	beq.n	8005040 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a3d      	ldr	r2, [pc, #244]	; (8005118 <TIM_Base_SetConfig+0x118>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00b      	beq.n	8005040 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a3c      	ldr	r2, [pc, #240]	; (800511c <TIM_Base_SetConfig+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <TIM_Base_SetConfig+0x120>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3a      	ldr	r2, [pc, #232]	; (8005124 <TIM_Base_SetConfig+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d108      	bne.n	8005052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2f      	ldr	r2, [pc, #188]	; (8005114 <TIM_Base_SetConfig+0x114>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01f      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d01b      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <TIM_Base_SetConfig+0x118>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d017      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2b      	ldr	r2, [pc, #172]	; (800511c <TIM_Base_SetConfig+0x11c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <TIM_Base_SetConfig+0x120>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a29      	ldr	r2, [pc, #164]	; (8005124 <TIM_Base_SetConfig+0x124>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a28      	ldr	r2, [pc, #160]	; (8005128 <TIM_Base_SetConfig+0x128>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a27      	ldr	r2, [pc, #156]	; (800512c <TIM_Base_SetConfig+0x12c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_Base_SetConfig+0x9a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <TIM_Base_SetConfig+0x130>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d108      	bne.n	80050ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a10      	ldr	r2, [pc, #64]	; (8005114 <TIM_Base_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00f      	beq.n	80050f8 <TIM_Base_SetConfig+0xf8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <TIM_Base_SetConfig+0x124>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0xf8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a11      	ldr	r2, [pc, #68]	; (8005128 <TIM_Base_SetConfig+0x128>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0xf8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <TIM_Base_SetConfig+0x12c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0xf8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <TIM_Base_SetConfig+0x130>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40013400 	.word	0x40013400
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800

08005134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 0302 	bic.w	r3, r3, #2
 8005180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2c      	ldr	r2, [pc, #176]	; (8005240 <TIM_OC1_SetConfig+0x10c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_OC1_SetConfig+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <TIM_OC1_SetConfig+0x110>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_OC1_SetConfig+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <TIM_OC1_SetConfig+0x114>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_OC1_SetConfig+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a29      	ldr	r2, [pc, #164]	; (800524c <TIM_OC1_SetConfig+0x118>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_OC1_SetConfig+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a28      	ldr	r2, [pc, #160]	; (8005250 <TIM_OC1_SetConfig+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10c      	bne.n	80051ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0308 	bic.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <TIM_OC1_SetConfig+0x10c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_OC1_SetConfig+0xc2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <TIM_OC1_SetConfig+0x110>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_OC1_SetConfig+0xc2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <TIM_OC1_SetConfig+0x114>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC1_SetConfig+0xc2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a18      	ldr	r2, [pc, #96]	; (800524c <TIM_OC1_SetConfig+0x118>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC1_SetConfig+0xc2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a17      	ldr	r2, [pc, #92]	; (8005250 <TIM_OC1_SetConfig+0x11c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d111      	bne.n	800521a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0210 	bic.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_OC2_SetConfig+0x100>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC2_SetConfig+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_OC2_SetConfig+0x104>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <TIM_OC2_SetConfig+0x100>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <TIM_OC2_SetConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <TIM_OC2_SetConfig+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_OC2_SetConfig+0xb0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <TIM_OC2_SetConfig+0x108>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC2_SetConfig+0xb0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <TIM_OC2_SetConfig+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC2_SetConfig+0xb0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a19      	ldr	r2, [pc, #100]	; (8005364 <TIM_OC2_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d113      	bne.n	800532c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <TIM_OC3_SetConfig+0xfc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC3_SetConfig+0x6a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a26      	ldr	r2, [pc, #152]	; (8005468 <TIM_OC3_SetConfig+0x100>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10d      	bne.n	80053ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_OC3_SetConfig+0xfc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_OC3_SetConfig+0xae>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <TIM_OC3_SetConfig+0x100>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_OC3_SetConfig+0xae>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1a      	ldr	r2, [pc, #104]	; (800546c <TIM_OC3_SetConfig+0x104>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_OC3_SetConfig+0xae>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <TIM_OC3_SetConfig+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0xae>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <TIM_OC3_SetConfig+0x10c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d113      	bne.n	800543e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40013400 	.word	0x40013400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <TIM_OC4_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_OC4_SetConfig+0x84>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a17      	ldr	r2, [pc, #92]	; (800553c <TIM_OC4_SetConfig+0xc4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC4_SetConfig+0x84>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a16      	ldr	r2, [pc, #88]	; (8005540 <TIM_OC4_SetConfig+0xc8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC4_SetConfig+0x84>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <TIM_OC4_SetConfig+0xcc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC4_SetConfig+0x84>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <TIM_OC4_SetConfig+0xd0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40013400 	.word	0x40013400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800

0800554c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <TIM_OC5_SetConfig+0xb4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC5_SetConfig+0x7a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a16      	ldr	r2, [pc, #88]	; (8005604 <TIM_OC5_SetConfig+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC5_SetConfig+0x7a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <TIM_OC5_SetConfig+0xbc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC5_SetConfig+0x7a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <TIM_OC5_SetConfig+0xc0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC5_SetConfig+0x7a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <TIM_OC5_SetConfig+0xc4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d109      	bne.n	80055da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800

08005614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800565a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <TIM_OC6_SetConfig+0xb8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_OC6_SetConfig+0x7c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <TIM_OC6_SetConfig+0xbc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_OC6_SetConfig+0x7c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <TIM_OC6_SetConfig+0xc0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_OC6_SetConfig+0x7c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <TIM_OC6_SetConfig+0xc4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC6_SetConfig+0x7c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC6_SetConfig+0xc8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d109      	bne.n	80056a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800

080056e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_TI1_SetConfig+0xc4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d013      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a23      	ldr	r2, [pc, #140]	; (80057a8 <TIM_TI1_SetConfig+0xc8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a22      	ldr	r2, [pc, #136]	; (80057ac <TIM_TI1_SetConfig+0xcc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a21      	ldr	r2, [pc, #132]	; (80057b0 <TIM_TI1_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <TIM_TI1_SetConfig+0xd4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_TI1_SetConfig+0x5e>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <TIM_TI1_SetConfig+0xd8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <TIM_TI1_SetConfig+0x62>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <TIM_TI1_SetConfig+0x64>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e003      	b.n	8005762 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	b2db      	uxtb	r3, r3
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f023 030a 	bic.w	r3, r3, #10
 800577c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 030a 	and.w	r3, r3, #10
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40013400 	.word	0x40013400
 80057b8:	40014000 	.word	0x40014000

080057bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 030a 	bic.w	r3, r3, #10
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f023 0210 	bic.w	r2, r3, #16
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	031b      	lsls	r3, r3, #12
 800585e:	b29b      	uxth	r3, r3
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0210 	bic.w	r2, r3, #16
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	b2db      	uxtb	r3, r3
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005998:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	031b      	lsls	r3, r3, #12
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	031b      	lsls	r3, r3, #12
 80059c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f043 0307 	orr.w	r3, r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e068      	b.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2e      	ldr	r2, [pc, #184]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01d      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae6:	d018      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d10c      	bne.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40013400 	.word	0x40013400
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40014000 	.word	0x40014000

08005b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e040      	b.n	8005c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb fd7a 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f82c 	bl	8005c44 <UART_SetConfig>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e022      	b.n	8005c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fad8 	bl	80061b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fb5f 	bl	80062f8 <UART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4ba4      	ldr	r3, [pc, #656]	; (8005f04 <UART_SetConfig+0x2c0>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a99      	ldr	r2, [pc, #612]	; (8005f08 <UART_SetConfig+0x2c4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cac:	4313      	orrs	r3, r2
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a90      	ldr	r2, [pc, #576]	; (8005f0c <UART_SetConfig+0x2c8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d126      	bne.n	8005d1c <UART_SetConfig+0xd8>
 8005cce:	4b90      	ldr	r3, [pc, #576]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d81b      	bhi.n	8005d14 <UART_SetConfig+0xd0>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0xa0>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005d05 	.word	0x08005d05
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005d0d 	.word	0x08005d0d
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e116      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e112      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e10e      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d12:	e10a      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1a:	e106      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a7c      	ldr	r2, [pc, #496]	; (8005f14 <UART_SetConfig+0x2d0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d138      	bne.n	8005d98 <UART_SetConfig+0x154>
 8005d26:	4b7a      	ldr	r3, [pc, #488]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	d82d      	bhi.n	8005d90 <UART_SetConfig+0x14c>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <UART_SetConfig+0xf8>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d91 	.word	0x08005d91
 8005d5c:	08005d79 	.word	0x08005d79
 8005d60:	08005d91 	.word	0x08005d91
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005d91 	.word	0x08005d91
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e0d8      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e0d4      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d86:	e0d0      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8e:	e0cc      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e0c8      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <UART_SetConfig+0x2d4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d125      	bne.n	8005dee <UART_SetConfig+0x1aa>
 8005da2:	4b5b      	ldr	r3, [pc, #364]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dac:	2b30      	cmp	r3, #48	; 0x30
 8005dae:	d016      	beq.n	8005dde <UART_SetConfig+0x19a>
 8005db0:	2b30      	cmp	r3, #48	; 0x30
 8005db2:	d818      	bhi.n	8005de6 <UART_SetConfig+0x1a2>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d00a      	beq.n	8005dce <UART_SetConfig+0x18a>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d814      	bhi.n	8005de6 <UART_SetConfig+0x1a2>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <UART_SetConfig+0x182>
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d008      	beq.n	8005dd6 <UART_SetConfig+0x192>
 8005dc4:	e00f      	b.n	8005de6 <UART_SetConfig+0x1a2>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dcc:	e0ad      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd4:	e0a9      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ddc:	e0a5      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005dde:	2308      	movs	r3, #8
 8005de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de4:	e0a1      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005de6:	2310      	movs	r3, #16
 8005de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dec:	e09d      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a4a      	ldr	r2, [pc, #296]	; (8005f1c <UART_SetConfig+0x2d8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d125      	bne.n	8005e44 <UART_SetConfig+0x200>
 8005df8:	4b45      	ldr	r3, [pc, #276]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e02:	2bc0      	cmp	r3, #192	; 0xc0
 8005e04:	d016      	beq.n	8005e34 <UART_SetConfig+0x1f0>
 8005e06:	2bc0      	cmp	r3, #192	; 0xc0
 8005e08:	d818      	bhi.n	8005e3c <UART_SetConfig+0x1f8>
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d00a      	beq.n	8005e24 <UART_SetConfig+0x1e0>
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d814      	bhi.n	8005e3c <UART_SetConfig+0x1f8>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <UART_SetConfig+0x1d8>
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d008      	beq.n	8005e2c <UART_SetConfig+0x1e8>
 8005e1a:	e00f      	b.n	8005e3c <UART_SetConfig+0x1f8>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e22:	e082      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e24:	2302      	movs	r3, #2
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2a:	e07e      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e32:	e07a      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3a:	e076      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e072      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a35      	ldr	r2, [pc, #212]	; (8005f20 <UART_SetConfig+0x2dc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d12a      	bne.n	8005ea4 <UART_SetConfig+0x260>
 8005e4e:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d01a      	beq.n	8005e94 <UART_SetConfig+0x250>
 8005e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e62:	d81b      	bhi.n	8005e9c <UART_SetConfig+0x258>
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	d00c      	beq.n	8005e84 <UART_SetConfig+0x240>
 8005e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6e:	d815      	bhi.n	8005e9c <UART_SetConfig+0x258>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <UART_SetConfig+0x238>
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e78:	d008      	beq.n	8005e8c <UART_SetConfig+0x248>
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x258>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e052      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e84:	2302      	movs	r3, #2
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e04e      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e04a      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e046      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e042      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <UART_SetConfig+0x2c4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d13a      	bne.n	8005f24 <UART_SetConfig+0x2e0>
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ebc:	d01a      	beq.n	8005ef4 <UART_SetConfig+0x2b0>
 8005ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ec2:	d81b      	bhi.n	8005efc <UART_SetConfig+0x2b8>
 8005ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec8:	d00c      	beq.n	8005ee4 <UART_SetConfig+0x2a0>
 8005eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ece:	d815      	bhi.n	8005efc <UART_SetConfig+0x2b8>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <UART_SetConfig+0x298>
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d008      	beq.n	8005eec <UART_SetConfig+0x2a8>
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x2b8>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e022      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e01e      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e01a      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e016      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e012      	b.n	8005f2a <UART_SetConfig+0x2e6>
 8005f04:	efff69f3 	.word	0xefff69f3
 8005f08:	40008000 	.word	0x40008000
 8005f0c:	40013800 	.word	0x40013800
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40004800 	.word	0x40004800
 8005f1c:	40004c00 	.word	0x40004c00
 8005f20:	40005000 	.word	0x40005000
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a9f      	ldr	r2, [pc, #636]	; (80061ac <UART_SetConfig+0x568>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d17a      	bne.n	800602a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d824      	bhi.n	8005f86 <UART_SetConfig+0x342>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x300>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f87 	.word	0x08005f87
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f87 	.word	0x08005f87
 8005f54:	08005f77 	.word	0x08005f77
 8005f58:	08005f87 	.word	0x08005f87
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	08005f87 	.word	0x08005f87
 8005f64:	08005f7f 	.word	0x08005f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fd fd4a 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8005f6c:	61f8      	str	r0, [r7, #28]
        break;
 8005f6e:	e010      	b.n	8005f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f70:	4b8f      	ldr	r3, [pc, #572]	; (80061b0 <UART_SetConfig+0x56c>)
 8005f72:	61fb      	str	r3, [r7, #28]
        break;
 8005f74:	e00d      	b.n	8005f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f76:	f7fd fcab 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005f7a:	61f8      	str	r0, [r7, #28]
        break;
 8005f7c:	e009      	b.n	8005f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	61fb      	str	r3, [r7, #28]
        break;
 8005f84:	e005      	b.n	8005f92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80fb 	beq.w	8006190 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d305      	bcc.n	8005fb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d903      	bls.n	8005fbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fbc:	e0e8      	b.n	8006190 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	461c      	mov	r4, r3
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	022b      	lsls	r3, r5, #8
 8005fd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fd4:	0222      	lsls	r2, r4, #8
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6849      	ldr	r1, [r1, #4]
 8005fda:	0849      	lsrs	r1, r1, #1
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4688      	mov	r8, r1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	eb12 0a08 	adds.w	sl, r2, r8
 8005fe6:	eb43 0b09 	adc.w	fp, r3, r9
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff8:	4650      	mov	r0, sl
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	f7fa fcd2 	bl	80009a4 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4613      	mov	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600e:	d308      	bcc.n	8006022 <UART_SetConfig+0x3de>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006016:	d204      	bcs.n	8006022 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	e0b6      	b.n	8006190 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006028:	e0b2      	b.n	8006190 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d15e      	bne.n	80060f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006038:	2b08      	cmp	r3, #8
 800603a:	d828      	bhi.n	800608e <UART_SetConfig+0x44a>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0x400>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	0800608f 	.word	0x0800608f
 8006054:	0800607f 	.word	0x0800607f
 8006058:	0800608f 	.word	0x0800608f
 800605c:	0800608f 	.word	0x0800608f
 8006060:	0800608f 	.word	0x0800608f
 8006064:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fd fcca 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 800606c:	61f8      	str	r0, [r7, #28]
        break;
 800606e:	e014      	b.n	800609a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fd fcdc 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8006074:	61f8      	str	r0, [r7, #28]
        break;
 8006076:	e010      	b.n	800609a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b4d      	ldr	r3, [pc, #308]	; (80061b0 <UART_SetConfig+0x56c>)
 800607a:	61fb      	str	r3, [r7, #28]
        break;
 800607c:	e00d      	b.n	800609a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fd fc27 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8006082:	61f8      	str	r0, [r7, #28]
        break;
 8006084:	e009      	b.n	800609a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608a:	61fb      	str	r3, [r7, #28]
        break;
 800608c:	e005      	b.n	800609a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d077      	beq.n	8006190 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	005a      	lsls	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	441a      	add	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d916      	bls.n	80060ea <UART_SetConfig+0x4a6>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c2:	d212      	bcs.n	80060ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f023 030f 	bic.w	r3, r3, #15
 80060cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	b29a      	uxth	r2, r3
 80060da:	8afb      	ldrh	r3, [r7, #22]
 80060dc:	4313      	orrs	r3, r2
 80060de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	8afa      	ldrh	r2, [r7, #22]
 80060e6:	60da      	str	r2, [r3, #12]
 80060e8:	e052      	b.n	8006190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060f0:	e04e      	b.n	8006190 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d827      	bhi.n	800614a <UART_SetConfig+0x506>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0x4bc>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006125 	.word	0x08006125
 8006104:	0800612d 	.word	0x0800612d
 8006108:	08006135 	.word	0x08006135
 800610c:	0800614b 	.word	0x0800614b
 8006110:	0800613b 	.word	0x0800613b
 8006114:	0800614b 	.word	0x0800614b
 8006118:	0800614b 	.word	0x0800614b
 800611c:	0800614b 	.word	0x0800614b
 8006120:	08006143 	.word	0x08006143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006124:	f7fd fc6c 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8006128:	61f8      	str	r0, [r7, #28]
        break;
 800612a:	e014      	b.n	8006156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800612c:	f7fd fc7e 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8006130:	61f8      	str	r0, [r7, #28]
        break;
 8006132:	e010      	b.n	8006156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006134:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <UART_SetConfig+0x56c>)
 8006136:	61fb      	str	r3, [r7, #28]
        break;
 8006138:	e00d      	b.n	8006156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613a:	f7fd fbc9 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800613e:	61f8      	str	r0, [r7, #28]
        break;
 8006140:	e009      	b.n	8006156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	61fb      	str	r3, [r7, #28]
        break;
 8006148:	e005      	b.n	8006156 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006154:	bf00      	nop
    }

    if (pclk != 0U)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d019      	beq.n	8006190 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	085a      	lsrs	r2, r3, #1
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d909      	bls.n	800618a <UART_SetConfig+0x546>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d205      	bcs.n	800618a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60da      	str	r2, [r3, #12]
 8006188:	e002      	b.n	8006190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800619c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	; 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061aa:	bf00      	nop
 80061ac:	40008000 	.word	0x40008000
 80061b0:	00f42400 	.word	0x00f42400

080061b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01a      	beq.n	80062ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b2:	d10a      	bne.n	80062ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006308:	f7fb fad2 	bl	80018b0 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b08      	cmp	r3, #8
 800631a:	d10e      	bne.n	800633a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800631c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f82d 	bl	800638a <UART_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e023      	b.n	8006382 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d10e      	bne.n	8006366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f817 	bl	800638a <UART_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e00d      	b.n	8006382 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b09c      	sub	sp, #112	; 0x70
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639a:	e0a5      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	f000 80a1 	beq.w	80064e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fb fa83 	bl	80018b0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <UART_WaitOnFlagUntilTimeout+0x32>
 80063b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d13e      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063d0:	667b      	str	r3, [r7, #100]	; 0x64
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e6      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	663b      	str	r3, [r7, #96]	; 0x60
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800640e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800641c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e5      	bne.n	80063ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e067      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d04f      	beq.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006456:	d147      	bne.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006460:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
 8006482:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e6      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	613b      	str	r3, [r7, #16]
   return(result);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064b4:	623a      	str	r2, [r7, #32]
 80064b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	69f9      	ldr	r1, [r7, #28]
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e010      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	429a      	cmp	r2, r3
 8006504:	f43f af4a 	beq.w	800639c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3770      	adds	r7, #112	; 0x70
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <MPU6050_Write_Reg>:
static double accel_sens;

static double look_up_gyro_sens[] = { 131.0, 65.5, 32.8, 16.4 };
static double look_up_accel_sens[] = { 16.384, 8.192, 4.096, 2.048 };

static MPU6050_SensorStatus_t MPU6050_Write_Reg(uint8_t addr, uint8_t val) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af04      	add	r7, sp, #16
 800651a:	4603      	mov	r3, r0
 800651c:	460a      	mov	r2, r1
 800651e:	71fb      	strb	r3, [r7, #7]
 8006520:	4613      	mov	r3, r2
 8006522:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDR_AD0, addr, 1, &val, 1,
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	b29a      	uxth	r2, r3
 800652c:	2303      	movs	r3, #3
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	2301      	movs	r3, #1
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2301      	movs	r3, #1
 800653a:	21d0      	movs	r1, #208	; 0xd0
 800653c:	4807      	ldr	r0, [pc, #28]	; (800655c <MPU6050_Write_Reg+0x48>)
 800653e:	f7fb fe13 	bl	8002168 <HAL_I2C_Mem_Write>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]
			HAL_TIMEOUT);

	if (HAL_ERROR == ret)
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <MPU6050_Write_Reg+0x3c>
		return SENSOR_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <MPU6050_Write_Reg+0x3e>
	else
		return SENSOR_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200000b4 	.word	0x200000b4

08006560 <MPU6050_Read_Reg>:

static MPU6050_SensorStatus_t MPU6050_Read_Reg(uint8_t addr, uint8_t *buf,
		uint8_t size) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af04      	add	r7, sp, #16
 8006566:	4603      	mov	r3, r0
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	4613      	mov	r3, r2
 800656e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDR_AD0, addr, 1, buf, size,
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	b29a      	uxth	r2, r3
 8006578:	79bb      	ldrb	r3, [r7, #6]
 800657a:	b29b      	uxth	r3, r3
 800657c:	2103      	movs	r1, #3
 800657e:	9102      	str	r1, [sp, #8]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2301      	movs	r3, #1
 8006588:	21d0      	movs	r1, #208	; 0xd0
 800658a:	4807      	ldr	r0, [pc, #28]	; (80065a8 <MPU6050_Read_Reg+0x48>)
 800658c:	f7fb ff00 	bl	8002390 <HAL_I2C_Mem_Read>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
			HAL_TIMEOUT);

	if (HAL_ERROR == ret)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <MPU6050_Read_Reg+0x3e>
		return SENSOR_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <MPU6050_Read_Reg+0x40>
	else
		return SENSOR_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	200000b4 	.word	0x200000b4

080065ac <MPU6050_Read_Raw_Value>:

static MPU6050_SensorStatus_t MPU6050_Read_Raw_Value(int16_t *ax, int16_t *ay,
		int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	MPU6050_SensorStatus_t state = SENSOR_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	77fb      	strb	r3, [r7, #31]
	uint8_t accel_buf[6] = { 0 };
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	2300      	movs	r3, #0
 80065c4:	83bb      	strh	r3, [r7, #28]
	uint8_t gyro_buf[6] = { 0 };
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	2300      	movs	r3, #0
 80065cc:	82bb      	strh	r3, [r7, #20]

	state = MPU6050_Read_Reg(ACCEL_XOUT_H_REG, accel_buf, 6);
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	2206      	movs	r2, #6
 80065d4:	4619      	mov	r1, r3
 80065d6:	203b      	movs	r0, #59	; 0x3b
 80065d8:	f7ff ffc2 	bl	8006560 <MPU6050_Read_Reg>
 80065dc:	4603      	mov	r3, r0
 80065de:	77fb      	strb	r3, [r7, #31]

	state = MPU6050_Read_Reg(GYRO_XOUT_H_REG, gyro_buf, 6);
 80065e0:	f107 0310 	add.w	r3, r7, #16
 80065e4:	2206      	movs	r2, #6
 80065e6:	4619      	mov	r1, r3
 80065e8:	2043      	movs	r0, #67	; 0x43
 80065ea:	f7ff ffb9 	bl	8006560 <MPU6050_Read_Reg>
 80065ee:	4603      	mov	r3, r0
 80065f0:	77fb      	strb	r3, [r7, #31]

	*ax = (int16_t) (accel_buf[0] << 8 | accel_buf[1]);
 80065f2:	7e3b      	ldrb	r3, [r7, #24]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	b21a      	sxth	r2, r3
 80065f8:	7e7b      	ldrb	r3, [r7, #25]
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b21a      	sxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	801a      	strh	r2, [r3, #0]
	*ay = (int16_t) (accel_buf[2] << 8 | accel_buf[3]);
 8006604:	7ebb      	ldrb	r3, [r7, #26]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b21a      	sxth	r2, r3
 800660a:	7efb      	ldrb	r3, [r7, #27]
 800660c:	b21b      	sxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b21a      	sxth	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	801a      	strh	r2, [r3, #0]
	*az = (int16_t) (accel_buf[4] << 8 | accel_buf[5]);
 8006616:	7f3b      	ldrb	r3, [r7, #28]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	b21a      	sxth	r2, r3
 800661c:	7f7b      	ldrb	r3, [r7, #29]
 800661e:	b21b      	sxth	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b21a      	sxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	801a      	strh	r2, [r3, #0]

	*gx = (int16_t) (gyro_buf[0] << 8 | gyro_buf[1]);
 8006628:	7c3b      	ldrb	r3, [r7, #16]
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	b21a      	sxth	r2, r3
 800662e:	7c7b      	ldrb	r3, [r7, #17]
 8006630:	b21b      	sxth	r3, r3
 8006632:	4313      	orrs	r3, r2
 8006634:	b21a      	sxth	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	801a      	strh	r2, [r3, #0]
	*gy = (int16_t) (gyro_buf[2] << 8 | gyro_buf[3]);
 800663a:	7cbb      	ldrb	r3, [r7, #18]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	b21a      	sxth	r2, r3
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	b21b      	sxth	r3, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	b21a      	sxth	r2, r3
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	801a      	strh	r2, [r3, #0]
	*gz = (int16_t) (gyro_buf[4] << 8 | gyro_buf[5]);
 800664c:	7d3b      	ldrb	r3, [r7, #20]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	b21a      	sxth	r2, r3
 8006652:	7d7b      	ldrb	r3, [r7, #21]
 8006654:	b21b      	sxth	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b21a      	sxth	r2, r3
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	801a      	strh	r2, [r3, #0]

	return state;
 800665e:	7ffb      	ldrb	r3, [r7, #31]

}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <MPU6050_Begin>:

MPU6050_SensorStatus_t MPU6050_Begin(MPU6050_Sensor_t *mpu6050) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

	uint8_t data_w;
	MPU6050_SensorStatus_t state = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
	uint8_t buf;
	state = HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDR_AD0, 1, HAL_TIMEOUT);
 8006674:	2303      	movs	r3, #3
 8006676:	2201      	movs	r2, #1
 8006678:	21d0      	movs	r1, #208	; 0xd0
 800667a:	4838      	ldr	r0, [pc, #224]	; (800675c <MPU6050_Begin+0xf4>)
 800667c:	f7fb ffa2 	bl	80025c4 <HAL_I2C_IsDeviceReady>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
	if (SENSOR_ERROR == state)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <MPU6050_Begin+0x26>
		return SENSOR_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e062      	b.n	8006754 <MPU6050_Begin+0xec>

	// Device Reset

	data_w = DEVICE_RESET_Mask;
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	73bb      	strb	r3, [r7, #14]
	state = MPU6050_Write_Reg(PWR_MGMT_1_REG, data_w);
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	4619      	mov	r1, r3
 8006696:	206b      	movs	r0, #107	; 0x6b
 8006698:	f7ff ff3c 	bl	8006514 <MPU6050_Write_Reg>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80066a0:	200a      	movs	r0, #10
 80066a2:	f7fb f911 	bl	80018c8 <HAL_Delay>

	/* Pwr mgt sleep up */

	state = MPU6050_Write_Reg(PWR_MGMT_1_REG, 0x00); // Internal clk 8mhz
 80066a6:	2100      	movs	r1, #0
 80066a8:	206b      	movs	r0, #107	; 0x6b
 80066aa:	f7ff ff33 	bl	8006514 <MPU6050_Write_Reg>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
	MPU6050_Read_Reg(PWR_MGMT_1_REG, &buf, 1);
 80066b2:	f107 030d 	add.w	r3, r7, #13
 80066b6:	2201      	movs	r2, #1
 80066b8:	4619      	mov	r1, r3
 80066ba:	206b      	movs	r0, #107	; 0x6b
 80066bc:	f7ff ff50 	bl	8006560 <MPU6050_Read_Reg>
	/* Select Filter band with */
	data_w = mpu6050->BandWith;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	73bb      	strb	r3, [r7, #14]
	state = MPU6050_Write_Reg(CONFIG_REG, data_w);
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	4619      	mov	r1, r3
 80066ca:	201a      	movs	r0, #26
 80066cc:	f7ff ff22 	bl	8006514 <MPU6050_Write_Reg>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
	MPU6050_Read_Reg(CONFIG_REG, &buf, 1);
 80066d4:	f107 030d 	add.w	r3, r7, #13
 80066d8:	2201      	movs	r2, #1
 80066da:	4619      	mov	r1, r3
 80066dc:	201a      	movs	r0, #26
 80066de:	f7ff ff3f 	bl	8006560 <MPU6050_Read_Reg>
	/*Select Accel config */
	data_w = mpu6050->AccelRange << FS_SEL_ACCEL_Pos;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	789b      	ldrb	r3, [r3, #2]
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	73bb      	strb	r3, [r7, #14]
	state = MPU6050_Write_Reg(ACCEL_CONFIG_REG, data_w);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	201c      	movs	r0, #28
 80066f0:	f7ff ff10 	bl	8006514 <MPU6050_Write_Reg>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]
	MPU6050_Read_Reg(ACCEL_CONFIG_REG, &buf, 1);
 80066f8:	f107 030d 	add.w	r3, r7, #13
 80066fc:	2201      	movs	r2, #1
 80066fe:	4619      	mov	r1, r3
 8006700:	201c      	movs	r0, #28
 8006702:	f7ff ff2d 	bl	8006560 <MPU6050_Read_Reg>
	/*Select Gyro config */
	data_w = mpu6050->GyroRange << FS_SEL_GYRO_Pos;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	73bb      	strb	r3, [r7, #14]
	state = MPU6050_Write_Reg(GYRO_CONFIG_REG, data_w);
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	4619      	mov	r1, r3
 8006712:	201b      	movs	r0, #27
 8006714:	f7ff fefe 	bl	8006514 <MPU6050_Write_Reg>
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]
	MPU6050_Read_Reg(GYRO_CONFIG_REG, &buf, 1);
 800671c:	f107 030d 	add.w	r3, r7, #13
 8006720:	2201      	movs	r2, #1
 8006722:	4619      	mov	r1, r3
 8006724:	201b      	movs	r0, #27
 8006726:	f7ff ff1b 	bl	8006560 <MPU6050_Read_Reg>

	/* Select gyro and accel senstive depends on config register*/
	gyro_sens = look_up_gyro_sens[mpu6050->GyroRange];
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <MPU6050_Begin+0xf8>)
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	490a      	ldr	r1, [pc, #40]	; (8006764 <MPU6050_Begin+0xfc>)
 800673a:	e9c1 2300 	strd	r2, r3, [r1]
	accel_sens = look_up_accel_sens[mpu6050->AccelRange];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	789b      	ldrb	r3, [r3, #2]
 8006742:	4a09      	ldr	r2, [pc, #36]	; (8006768 <MPU6050_Begin+0x100>)
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	4907      	ldr	r1, [pc, #28]	; (800676c <MPU6050_Begin+0x104>)
 800674e:	e9c1 2300 	strd	r2, r3, [r1]

	return state;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200000b4 	.word	0x200000b4
 8006760:	20000010 	.word	0x20000010
 8006764:	20000290 	.word	0x20000290
 8006768:	20000030 	.word	0x20000030
 800676c:	20000298 	.word	0x20000298

08006770 <MPU6050_Calibration>:

MPU6050_SensorStatus_t MPU6050_Calibration(MPU6050_Sensor_t *mpu6050,
		int iteration) {
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]

	MPU6050_SensorStatus_t state = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	77fb      	strb	r3, [r7, #31]

	int16_t accel_raw[3];
	int16_t gyro_raw[3];

	mpu6050->Offset_val.accel[0] = 0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	815a      	strh	r2, [r3, #10]
	mpu6050->Offset_val.accel[1] = 0;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	819a      	strh	r2, [r3, #12]
	mpu6050->Offset_val.accel[2] = 0;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	81da      	strh	r2, [r3, #14]

	mpu6050->Offset_val.gyro[0] = 0;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	809a      	strh	r2, [r3, #4]
	mpu6050->Offset_val.gyro[1] = 0;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	80da      	strh	r2, [r3, #6]
	mpu6050->Offset_val.gyro[2] = 0;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	811a      	strh	r2, [r3, #8]

	// Calibration accelometers and gyroscope

	for (int i = 0; i < iteration; i++) {
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e061      	b.n	800686c <MPU6050_Calibration+0xfc>

		state = MPU6050_Read_Raw_Value(&accel_raw[0], &accel_raw[1],
 80067a8:	f107 0408 	add.w	r4, r7, #8
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	1d1a      	adds	r2, r3, #4
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	1c99      	adds	r1, r3, #2
 80067b8:	f107 0010 	add.w	r0, r7, #16
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	3304      	adds	r3, #4
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	3302      	adds	r3, #2
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	4623      	mov	r3, r4
 80067ce:	f7ff feed 	bl	80065ac <MPU6050_Read_Raw_Value>
 80067d2:	4603      	mov	r3, r0
 80067d4:	77fb      	strb	r3, [r7, #31]
				&accel_raw[2], &gyro_raw[0], &gyro_raw[1], &gyro_raw[2]);

		mpu6050->Offset_val.accel[0] += accel_raw[0];
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21a      	sxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	815a      	strh	r2, [r3, #10]
		mpu6050->Offset_val.accel[1] += accel_raw[1];
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	b29b      	uxth	r3, r3
 8006800:	b21a      	sxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	819a      	strh	r2, [r3, #12]
		mpu6050->Offset_val.accel[2] += accel_raw[2];
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800680c:	b29a      	uxth	r2, r3
 800680e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006812:	b29b      	uxth	r3, r3
 8006814:	4413      	add	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	b21a      	sxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	81da      	strh	r2, [r3, #14]

		mpu6050->Offset_val.gyro[0] += gyro_raw[0];
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006824:	b29a      	uxth	r2, r3
 8006826:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4413      	add	r3, r2
 800682e:	b29b      	uxth	r3, r3
 8006830:	b21a      	sxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	809a      	strh	r2, [r3, #4]
		mpu6050->Offset_val.gyro[1] += gyro_raw[1];
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800683c:	b29a      	uxth	r2, r3
 800683e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006842:	b29b      	uxth	r3, r3
 8006844:	4413      	add	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	b21a      	sxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	80da      	strh	r2, [r3, #6]
		mpu6050->Offset_val.gyro[2] += gyro_raw[2];
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006854:	b29a      	uxth	r2, r3
 8006856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800685a:	b29b      	uxth	r3, r3
 800685c:	4413      	add	r3, r2
 800685e:	b29b      	uxth	r3, r3
 8006860:	b21a      	sxth	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	811a      	strh	r2, [r3, #8]
	for (int i = 0; i < iteration; i++) {
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3301      	adds	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	db99      	blt.n	80067a8 <MPU6050_Calibration+0x38>

	}
	mpu6050->Offset_val.accel[0] /= iteration;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800687a:	461a      	mov	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006882:	b21a      	sxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	815a      	strh	r2, [r3, #10]
	mpu6050->Offset_val.accel[1] /= iteration;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	fb92 f3f3 	sdiv	r3, r2, r3
 8006896:	b21a      	sxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	819a      	strh	r2, [r3, #12]
	mpu6050->Offset_val.accel[2] /= iteration;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80068a2:	461a      	mov	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80068aa:	b21a      	sxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	81da      	strh	r2, [r3, #14]

	mpu6050->Offset_val.gyro[0] /= iteration;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068b6:	461a      	mov	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80068be:	b21a      	sxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	809a      	strh	r2, [r3, #4]
	mpu6050->Offset_val.gyro[1] /= iteration;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80068ca:	461a      	mov	r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80068d2:	b21a      	sxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	80da      	strh	r2, [r3, #6]
	mpu6050->Offset_val.gyro[2] /= iteration;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068de:	461a      	mov	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80068e6:	b21a      	sxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	811a      	strh	r2, [r3, #8]

	return state;
 80068ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3724      	adds	r7, #36	; 0x24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}
	...

080068f8 <MPU6050_Read_Temp_Value>:

MPU6050_SensorStatus_t MPU6050_Read_Temp_Value(MPU6050_Sensor_t *mpu6050) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

	MPU6050_SensorStatus_t state = SENSOR_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2];
	int16_t temp_raw;
	state = MPU6050_Read_Reg(TEMP_OUT_H_REG, temp, 2);
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	2202      	movs	r2, #2
 800690a:	4619      	mov	r1, r3
 800690c:	2041      	movs	r0, #65	; 0x41
 800690e:	f7ff fe27 	bl	8006560 <MPU6050_Read_Reg>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
	temp_raw = temp[0] << 8 | temp[1];
 8006916:	7a3b      	ldrb	r3, [r7, #8]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	b21a      	sxth	r2, r3
 800691c:	7a7b      	ldrb	r3, [r7, #9]
 800691e:	b21b      	sxth	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	81bb      	strh	r3, [r7, #12]

	/* Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53 */
	mpu6050->Temperature = (temp_raw / 340) + 36.53;
 8006924:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006928:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <MPU6050_Read_Temp_Value+0x70>)
 800692a:	fb82 1203 	smull	r1, r2, r2, r3
 800692e:	11d2      	asrs	r2, r2, #7
 8006930:	17db      	asrs	r3, r3, #31
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	b21b      	sxth	r3, r3
 8006936:	4618      	mov	r0, r3
 8006938:	f7f9 fd98 	bl	800046c <__aeabi_i2d>
 800693c:	a308      	add	r3, pc, #32	; (adr r3, 8006960 <MPU6050_Read_Temp_Value+0x68>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 fc47 	bl	80001d4 <__adddf3>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return state;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	0a3d70a4 	.word	0x0a3d70a4
 8006964:	404243d7 	.word	0x404243d7
 8006968:	60606061 	.word	0x60606061
 800696c:	00000000 	.word	0x00000000

08006970 <MPU6050_Read_Value>:

MPU6050_SensorStatus_t MPU6050_Read_Value(MPU6050_Sensor_t *mpu6050) {
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b089      	sub	sp, #36	; 0x24
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
	MPU6050_SensorStatus_t state = SENSOR_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
	int16_t accel_raw[3];
	int16_t gyro_raw[3];
	state = MPU6050_Read_Raw_Value(&accel_raw[0], &accel_raw[1], &accel_raw[2],
 800697c:	f107 0408 	add.w	r4, r7, #8
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	1d1a      	adds	r2, r3, #4
 8006986:	f107 0310 	add.w	r3, r7, #16
 800698a:	1c99      	adds	r1, r3, #2
 800698c:	f107 0010 	add.w	r0, r7, #16
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	3304      	adds	r3, #4
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	3302      	adds	r3, #2
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4623      	mov	r3, r4
 80069a2:	f7ff fe03 	bl	80065ac <MPU6050_Read_Raw_Value>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
			&gyro_raw[0], &gyro_raw[1], &gyro_raw[2]);

	mpu6050->Acc_val.accel_x = ((accel_raw[0] - mpu6050->Offset_val.accel[0])
 80069aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80069b6:	1ad3      	subs	r3, r2, r3
			/ accel_sens) * 0.004;
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7f9 fd57 	bl	800046c <__aeabi_i2d>
 80069be:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <MPU6050_Read_Value+0x1a8>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fee6 	bl	8000794 <__aeabi_ddiv>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4610      	mov	r0, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	a34f      	add	r3, pc, #316	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fdb3 	bl	8000540 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
	mpu6050->Acc_val.accel_x = ((accel_raw[0] - mpu6050->Offset_val.accel[0])
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mpu6050->Acc_val.accel_y = ((accel_raw[1] - mpu6050->Offset_val.accel[1])
 80069e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
			/ accel_sens) * 0.004;
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7f9 fd3a 	bl	800046c <__aeabi_i2d>
 80069f8:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <MPU6050_Read_Value+0x1a8>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fec9 	bl	8000794 <__aeabi_ddiv>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	a341      	add	r3, pc, #260	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fd96 	bl	8000540 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
	mpu6050->Acc_val.accel_y = ((accel_raw[1] - mpu6050->Offset_val.accel[1])
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	mpu6050->Acc_val.accel_z = ((accel_raw[2] - mpu6050->Offset_val.accel[2])
 8006a1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006a2a:	1ad3      	subs	r3, r2, r3
			/ accel_sens) * 0.004;
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fd1d 	bl	800046c <__aeabi_i2d>
 8006a32:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <MPU6050_Read_Value+0x1a8>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 feac 	bl	8000794 <__aeabi_ddiv>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	a332      	add	r3, pc, #200	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fd79 	bl	8000540 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
	mpu6050->Acc_val.accel_z = ((accel_raw[2] - mpu6050->Offset_val.accel[2])
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	e9c1 2308 	strd	r2, r3, [r1, #32]

	mpu6050->Gyro_val.gyro_x = ((gyro_raw[0] - mpu6050->Offset_val.gyro[0])
 8006a58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
			/ gyro_sens) * 0.004;
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fd00 	bl	800046c <__aeabi_i2d>
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	; (8006b1c <MPU6050_Read_Value+0x1ac>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fe8f 	bl	8000794 <__aeabi_ddiv>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	a324      	add	r3, pc, #144	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fd5c 	bl	8000540 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
	mpu6050->Gyro_val.gyro_x = ((gyro_raw[0] - mpu6050->Offset_val.gyro[0])
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mpu6050->Gyro_val.gyro_y = ((gyro_raw[1] - mpu6050->Offset_val.gyro[1])
 8006a92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a9e:	1ad3      	subs	r3, r2, r3
			/ gyro_sens) * 0.004;
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7f9 fce3 	bl	800046c <__aeabi_i2d>
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <MPU6050_Read_Value+0x1ac>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f7f9 fe72 	bl	8000794 <__aeabi_ddiv>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	a315      	add	r3, pc, #84	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7f9 fd3f 	bl	8000540 <__aeabi_dmul>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
	mpu6050->Gyro_val.gyro_y = ((gyro_raw[1] - mpu6050->Offset_val.gyro[1])
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mpu6050->Gyro_val.gyro_x = ((gyro_raw[2] - mpu6050->Offset_val.gyro[2])
 8006acc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ad8:	1ad3      	subs	r3, r2, r3
			/ gyro_sens) * 0.004;
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fcc6 	bl	800046c <__aeabi_i2d>
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <MPU6050_Read_Value+0x1ac>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fe55 	bl	8000794 <__aeabi_ddiv>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	a307      	add	r3, pc, #28	; (adr r3, 8006b10 <MPU6050_Read_Value+0x1a0>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fd22 	bl	8000540 <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
	mpu6050->Gyro_val.gyro_x = ((gyro_raw[2] - mpu6050->Offset_val.gyro[2])
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	return state;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd90      	pop	{r4, r7, pc}
 8006b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b14:	3f70624d 	.word	0x3f70624d
 8006b18:	20000298 	.word	0x20000298
 8006b1c:	20000290 	.word	0x20000290

08006b20 <MPU6050_Test>:

MPU6050_SensorStatus_t MPU6050_Test(MPU6050_Sensor_t *mpu6050) {
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b089      	sub	sp, #36	; 0x24
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	6078      	str	r0, [r7, #4]
	MPU6050_SensorStatus_t state = SENSOR_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
	int16_t accel_raw[3];
	int16_t gyro_raw[3];
	state = MPU6050_Read_Raw_Value(&accel_raw[0], &accel_raw[1], &accel_raw[2],
 8006b2c:	f107 0408 	add.w	r4, r7, #8
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	f107 0310 	add.w	r3, r7, #16
 8006b3a:	1c99      	adds	r1, r3, #2
 8006b3c:	f107 0010 	add.w	r0, r7, #16
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	3304      	adds	r3, #4
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4623      	mov	r3, r4
 8006b52:	f7ff fd2b 	bl	80065ac <MPU6050_Read_Raw_Value>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
			&gyro_raw[0], &gyro_raw[1], &gyro_raw[2]);

	mpu6050->Acc_val.accel_x = ((accel_raw[0]) / accel_sens);
 8006b5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 fc84 	bl	800046c <__aeabi_i2d>
 8006b64:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <MPU6050_Test+0xf8>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f7f9 fe13 	bl	8000794 <__aeabi_ddiv>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mpu6050->Acc_val.accel_y = ((accel_raw[1]) / accel_sens);
 8006b78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7f9 fc75 	bl	800046c <__aeabi_i2d>
 8006b82:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <MPU6050_Test+0xf8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fe04 	bl	8000794 <__aeabi_ddiv>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	e9c1 2306 	strd	r2, r3, [r1, #24]
	mpu6050->Acc_val.accel_z = ((accel_raw[2]) / accel_sens);
 8006b96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7f9 fc66 	bl	800046c <__aeabi_i2d>
 8006ba0:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <MPU6050_Test+0xf8>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fdf5 	bl	8000794 <__aeabi_ddiv>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	e9c1 2308 	strd	r2, r3, [r1, #32]

	mpu6050->Gyro_val.gyro_x = ((gyro_raw[0]) / gyro_sens);
 8006bb4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7f9 fc57 	bl	800046c <__aeabi_i2d>
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <MPU6050_Test+0xfc>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fde6 	bl	8000794 <__aeabi_ddiv>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mpu6050->Gyro_val.gyro_y = ((gyro_raw[1]) / gyro_sens);
 8006bd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7f9 fc48 	bl	800046c <__aeabi_i2d>
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <MPU6050_Test+0xfc>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fdd7 	bl	8000794 <__aeabi_ddiv>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mpu6050->Gyro_val.gyro_x = ((gyro_raw[2]) / gyro_sens);
 8006bf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7f9 fc39 	bl	800046c <__aeabi_i2d>
 8006bfa:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <MPU6050_Test+0xfc>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fdc8 	bl	8000794 <__aeabi_ddiv>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return state;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd90      	pop	{r4, r7, pc}
 8006c18:	20000298 	.word	0x20000298
 8006c1c:	20000290 	.word	0x20000290

08006c20 <MPU6050_Get_Device_Address>:

uint8_t MPU6050_Get_Device_Address() {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
	MPU6050_SensorStatus_t state = SENSOR_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	71fb      	strb	r3, [r7, #7]
	uint8_t who_am_i = 0x00;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	71bb      	strb	r3, [r7, #6]

	state = MPU6050_Read_Reg(WHO_AM_I_REG, &who_am_i, 1);
 8006c2e:	1dbb      	adds	r3, r7, #6
 8006c30:	2201      	movs	r2, #1
 8006c32:	4619      	mov	r1, r3
 8006c34:	2075      	movs	r0, #117	; 0x75
 8006c36:	f7ff fc93 	bl	8006560 <MPU6050_Read_Reg>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]

	if (SENSOR_OK == state)
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <MPU6050_Get_Device_Address+0x28>
		return who_am_i;
 8006c44:	79bb      	ldrb	r3, [r7, #6]
 8006c46:	e000      	b.n	8006c4a <MPU6050_Get_Device_Address+0x2a>
	else
		return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	0000      	movs	r0, r0
 8006c54:	0000      	movs	r0, r0
	...

08006c58 <HAL_TIM_IC_CaptureCallback>:
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7f1b      	ldrb	r3, [r3, #28]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d166      	bne.n	8006d36 <HAL_TIM_IC_CaptureCallback+0xde>
	{
		if(isFirstCapture == 0)
 8006c68:	4b37      	ldr	r3, [pc, #220]	; (8006d48 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d11a      	bne.n	8006ca6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			first_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe f958 	bl	8004f28 <HAL_TIM_ReadCapturedValue>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4a34      	ldr	r2, [pc, #208]	; (8006d4c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006c7c:	6013      	str	r3, [r2, #0]
			isFirstCapture = 1;
 8006c7e:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 020a 	bic.w	r2, r2, #10
 8006c92:	621a      	str	r2, [r3, #32]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6a1a      	ldr	r2, [r3, #32]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0202 	orr.w	r2, r2, #2
 8006ca2:	621a      	str	r2, [r3, #32]
			isFirstCapture = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
		}
	}
}
 8006ca4:	e047      	b.n	8006d36 <HAL_TIM_IC_CaptureCallback+0xde>
			second_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fe f93d 	bl	8004f28 <HAL_TIM_ReadCapturedValue>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a27      	ldr	r2, [pc, #156]	; (8006d50 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006cb2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24
			diff_captures = second_capture - first_capture;
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8006cc8:	6013      	str	r3, [r2, #0]
			distance = diff_captures * .034 /2;
 8006cca:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7f9 fbbc 	bl	800044c <__aeabi_ui2d>
 8006cd4:	a31a      	add	r3, pc, #104	; (adr r3, 8006d40 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fc31 	bl	8000540 <__aeabi_dmul>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cee:	f7f9 fd51 	bl	8000794 <__aeabi_ddiv>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f7f9 fe33 	bl	8000964 <__aeabi_d2uiz>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_TIM_IC_CaptureCallback+0x100>)
 8006d02:	6013      	str	r3, [r2, #0]
			isFirstCapture = 0;
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6a1a      	ldr	r2, [r3, #32]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 020a 	bic.w	r2, r2, #10
 8006d18:	621a      	str	r2, [r3, #32]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a12      	ldr	r2, [r2, #32]
 8006d24:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0202 	bic.w	r2, r2, #2
 8006d34:	60da      	str	r2, [r3, #12]
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	b020c49c 	.word	0xb020c49c
 8006d44:	3fa16872 	.word	0x3fa16872
 8006d48:	200002a0 	.word	0x200002a0
 8006d4c:	200002a4 	.word	0x200002a4
 8006d50:	200002a8 	.word	0x200002a8
 8006d54:	200002ac 	.word	0x200002ac
 8006d58:	200002b0 	.word	0x200002b0

08006d5c <__libc_init_array>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4d0d      	ldr	r5, [pc, #52]	; (8006d94 <__libc_init_array+0x38>)
 8006d60:	4c0d      	ldr	r4, [pc, #52]	; (8006d98 <__libc_init_array+0x3c>)
 8006d62:	1b64      	subs	r4, r4, r5
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	2600      	movs	r6, #0
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	d109      	bne.n	8006d80 <__libc_init_array+0x24>
 8006d6c:	4d0b      	ldr	r5, [pc, #44]	; (8006d9c <__libc_init_array+0x40>)
 8006d6e:	4c0c      	ldr	r4, [pc, #48]	; (8006da0 <__libc_init_array+0x44>)
 8006d70:	f000 f820 	bl	8006db4 <_init>
 8006d74:	1b64      	subs	r4, r4, r5
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	2600      	movs	r6, #0
 8006d7a:	42a6      	cmp	r6, r4
 8006d7c:	d105      	bne.n	8006d8a <__libc_init_array+0x2e>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d84:	4798      	blx	r3
 8006d86:	3601      	adds	r6, #1
 8006d88:	e7ee      	b.n	8006d68 <__libc_init_array+0xc>
 8006d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8e:	4798      	blx	r3
 8006d90:	3601      	adds	r6, #1
 8006d92:	e7f2      	b.n	8006d7a <__libc_init_array+0x1e>
 8006d94:	08006e1c 	.word	0x08006e1c
 8006d98:	08006e1c 	.word	0x08006e1c
 8006d9c:	08006e1c 	.word	0x08006e1c
 8006da0:	08006e20 	.word	0x08006e20

08006da4 <memset>:
 8006da4:	4402      	add	r2, r0
 8006da6:	4603      	mov	r3, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <_init>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr

08006dc0 <_fini>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr
